---
resources:
  - name: hello-code
    type: git
    source:
      uri: git@github.com:holmes89/hello-example.git
      branch: main
      private_key: ((github.private-key)) #NOT NEEDED FOR THIS EXAMPLE
  - name: gh-release
    type: github-release
    source:
      owner: holmes89
      repository: hello-example
      access_token: ((github.access-token))
  - name: lambda-release
    type: s3
    source:
      bucket: hello-example-lambda
      region_name: us-east-2
      regexp: releases/server-(.*).zip
      access_key_id: ((aws.access-key))
      secret_access_key: ((aws.secret-access-key))
  - name: docker-image
    type: docker-image
    source:
      repository: holmes89/hello-example
      username: ((docker.username))
      password: ((docker.access-token))

jobs:
- name: lint
  plan:
  - get: hello-code
    trigger: true
  - task: run-lint
    config:
      caches:
        - path: gopath/
      platform: linux
      inputs:
        - name: hello-code
      image_resource:
        type: docker-image
        source: {repository: golang}
      run:
        path: /bin/sh
        args: 
          - ./hello-code/ci/lint.sh
- name: test
  plan:
  - get: hello-code
    trigger: true
    passed: [lint]
  - task: run-test
    config:
      caches:
        - path: gopath/
      platform: linux
      inputs:
        - name: hello-code
      image_resource:
        type: docker-image
        source: {repository: golang}
      run:
        path: /bin/sh
        args: 
          - ./hello-code/ci/test.sh
- name: build-container
  plan:
  - get: hello-code
    trigger: true
    passed: [test]
  - task: build
    config:
      platform: linux
      inputs:
        - name: hello-code
      image_resource:
        type: docker-image
        source: {repository: golang}
      run:
        path: /bin/sh
        args:
          - -c
          - |
            cd hello-code
            export VERSION=$(git rev-parse --short HEAD)
            echo "$VERSION" > ../meta/tag.txt
      outputs:
        - name: meta
  - put: docker-image
    params:
      build: hello-code
      tag_file: meta/tag.txt
      tag_as_latest: true
- name: build-binary
  plan:
  - get: hello-code
    trigger: true
    passed: [test]
  - task: build
    config:
      caches:
        - path: gopath/
      platform: linux
      inputs:
        - name: hello-code
      image_resource:
        type: docker-image
        source: {repository: golang}
      run:
        path: /bin/sh
        args:
          - -c
          - |
            apt-get update
            apt-get install -y zip
            echo "Hello API" > ./meta/name.txt
            cd hello-code
            export VERSION=$(git rev-parse --short HEAD)
            echo "$VERSION" > ../meta/tag.txt
            echo "Building Version: $VERSION"
            go get ./...
            GOOS=linux GOARCH=amd64 go build -o ../dist/hello_linux_amd64 cmd/server/main.go
            GOOS=linux GOARCH=arm64 go build -o ../dist/hello_linux_arm64 cmd/server/main.go
            GOOS=linux go build -o server cmd/serverless/main.go
            zip ../archives/server-$VERSION.zip server
      outputs:
        - name: dist
        - name: meta
        - name: archives
  - put: gh-release
    params:
      name: meta/name.txt
      tag: meta/tag.txt
      globs:
        - dist/*
  - put: lambda-release
    params:
        file: archives/*.zip
- name: deploy-amd64-server
  plan:
    - get: gh-release
      passed: [build-binary]
      trigger: true
    - get: hello-code
    - task: pack-amd64 
      config:
        platform: linux
        params:
          AWS_ACCESS_KEY_ID: ((aws.access-key)) 
          AWS_SECRET_ACCESS_KEY: ((aws.secret-access-key))
          BUILD_TYPE: amd64
          INSTANCE_TYPE: t3a.nano
          AMI: ami-0a91cd140a1fc148a
        inputs:
          - name: hello-code
          - name: gh-release
        outputs:
          - name: packer-manifest-amd64
        image_resource:
          type: registry-image
          source: { repository: hashicorp/packer, tag: light }
        run:
          path: /bin/sh
          args:
            - ./hello-code/ci/packer-build.sh
    - task: deploy-amd64
      config:
        platform: linux
        params:
          AWS_ACCESS_KEY_ID: ((aws.access-key)) 
          AWS_SECRET_ACCESS_KEY: ((aws.secret-access-key))
          BUILD_TYPE: amd64
        inputs:
          - name: hello-code
          - name: packer-manifest-amd64
        image_resource:
          type: registry-image
          source: { repository: hashicorp/terraform, tag: light }
        run:
          path: /bin/sh
          args:
            - ./hello-code/ci/terraform-deploy-server.sh      
- name: deploy-arm64-server
  plan:
    - get: gh-release
      passed: [build-binary]
      trigger: true
    - get: hello-code
    - task: pack-arm64 
      config:
        platform: linux
        params:
          AWS_ACCESS_KEY_ID: ((aws.access-key)) 
          AWS_SECRET_ACCESS_KEY: ((aws.secret-access-key))
          BUILD_TYPE: arm64
          INSTANCE_TYPE: t4g.nano
          AMI: ami-0742a572c2ce45ebf
        inputs:
          - name: hello-code
          - name: gh-release
        outputs:
          - name: packer-manifest-arm64
        image_resource:
          type: registry-image
          source: { repository: hashicorp/packer, tag: light }
        run:
          path: /bin/sh
          args:
            - ./hello-code/ci/packer-build.sh
    - task: deploy-arm64
      config:
        platform: linux
        params:
          AWS_ACCESS_KEY_ID: ((aws.access-key)) 
          AWS_SECRET_ACCESS_KEY: ((aws.secret-access-key))
          BUILD_TYPE: arm64
        inputs:
          - name: hello-code
          - name: packer-manifest-arm64
        image_resource:
          type: registry-image
          source: { repository: hashicorp/terraform, tag: light }
        run:
          path: /bin/sh
          args:
            - ./hello-code/ci/terraform-deploy-server.sh
- name: deploy-serverless
  plan:
    - get: lambda-release
      passed: [build-binary]
      trigger: true
    - get: hello-code
    - task: deploy-arm64
      config:
        platform: linux
        params:
          AWS_ACCESS_KEY_ID: ((aws.access-key)) 
          AWS_SECRET_ACCESS_KEY: ((aws.secret-access-key))
        inputs:
          - name: hello-code
        image_resource:
          type: registry-image
          source: { repository: hashicorp/terraform, tag: light }
        run:
          path: /bin/sh
          args:
            - ./hello-code/ci/terraform-deploy-serverless.sh
